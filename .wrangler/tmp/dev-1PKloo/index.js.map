{
  "version": 3,
  "sources": ["../../../src/index.js", "../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-Heix2c/middleware-insertion-facade.js", "../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-Heix2c/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/jana/cf_ai_edge_chat/.wrangler/tmp/dev-1PKloo",
  "sourcesContent": ["export default {\n  fetch: async (req, env) => {\n    const url = new URL(req.url);\n\n    // Serve the chat page\n    if (req.method === \"GET\" && url.pathname === \"/\") {\n      return new Response(getHtml(), { headers: { \"content-type\": \"text/html\" } });\n    }\n\n    // Chat API \u2192 forwards to Durable Object (per-session memory)\n    if (req.method === \"POST\" && url.pathname === \"/api/chat\") {\n      const { sessionId, user } = await req.json();\n      if (!sessionId || !user) {\n        return new Response(JSON.stringify({ error: \"sessionId and user required\" }), { status: 400 });\n      }\n      const id = env.CHAT_DO.idFromName(sessionId);\n      const stub = env.CHAT_DO.get(id);\n      return await stub.fetch(\"https://do/chat\", {\n        method: \"POST\",\n        body: JSON.stringify({ user }),\n      });\n    }\n\n    if (url.pathname === \"/health\") return new Response(\"ok\");\n    return new Response(\"Not found\", { status: 404 });\n  }\n};\n\n// -------- Durable Object: stores history + rolling summary ----------\nexport class ChatSession {\n  constructor(state, env) { this.state = state; this.env = env; }\n\n  async fetch(req) {\n    const url = new URL(req.url);\n    if (req.method === \"POST\" && url.pathname === \"/chat\") {\n      const { user } = await req.json();\n\n      // Load memory\n      const history = (await this.state.storage.get(\"history\")) || [];\n      const summary = (await this.state.storage.get(\"summary\")) || \"\";\n\n      // Build context (trim to keep tokens bounded)\n      const recent = history.slice(-8);\n      const systemPrompt = [\n        \"You are a concise, helpful assistant.\",\n        \"If unsure, ask one brief clarifying question.\",\n        \"Use short, clear answers.\"\n      ].join(\" \");\n\n      // Call Workers AI (LLM)\n      const model = \"@cf/meta/llama-3.3-70b-instruct-fp8-fast\";\n      const messages = [\n        { role: \"system\", content: systemPrompt + (summary ? ` Summary: ${summary}` : \"\") },\n        ...recent,\n        { role: \"user\", content: user }\n      ];\n\n      const aiResp = await this.env.AI.run(model, { messages });\n      const assistant = aiResp?.response ?? \"(no response)\";\n\n      // Update memory\n      history.push({ role: \"user\", content: user });\n      history.push({ role: \"assistant\", content: assistant });\n\n      const trimmed = history.slice(-12);\n      const sumPrompt = [\n        { role: \"system\", content: \"Summarize the conversation so far in <= 2 sentences for memory.\" },\n        { role: \"user\", content: trimmed.map(m => `${m.role.toUpperCase()}: ${m.content}`).join(\"\\n\") }\n      ];\n      const sumResp = await this.env.AI.run(model, { messages: sumPrompt });\n      const newSummary = sumResp?.response ?? summary;\n\n      await this.state.storage.put(\"history\", trimmed);\n      await this.state.storage.put(\"summary\", newSummary);\n\n      return new Response(JSON.stringify({ reply: assistant }), {\n        headers: { \"content-type\": \"application/json\" }\n      });\n    }\n    return new Response(\"DO not found\", { status: 404 });\n  }\n}\n\n// -------- Minimal chat UI ----------\nfunction getHtml() {\n  return `<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <title>cf_ai_edge_chat</title>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <style>\n    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:20px;max-width:720px}\n    #log{border:1px solid #ddd;border-radius:8px;padding:12px;min-height:280px;white-space:pre-wrap}\n    .row{display:flex;gap:8px;margin-top:12px}\n    input,button{font-size:16px;padding:10px;border-radius:8px;border:1px solid #ccc}\n    button{cursor:pointer}\n    .user{color:#0b5;}\n    .bot{color:#06c;}\n  </style>\n</head>\n<body>\n  <h2>Cloudflare AI \u2014 Edge Chat</h2>\n  <div id=\"log\"></div>\n  <div class=\"row\">\n    <input id=\"msg\" placeholder=\"Type a message...\" style=\"flex:1\" />\n    <button id=\"send\">Send</button>\n  </div>\n  <script>\n    const log = document.getElementById('log');\n    const sendBtn = document.getElementById('send');\n    const input = document.getElementById('msg');\n    const sessionId = crypto.randomUUID();\n\n    function add(role, text){\n      const div = document.createElement('div');\n      div.className = role === 'user' ? 'user' : 'bot';\n      div.textContent = (role === 'user' ? 'You: ' : 'Bot: ') + text;\n      log.appendChild(div);\n      log.scrollTop = log.scrollHeight;\n    }\n\n    async function send(){\n      const text = input.value.trim();\n      if(!text) return;\n      add('user', text);\n      input.value = '';\n      const r = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {'content-type':'application/json'},\n        body: JSON.stringify({ sessionId, user: text })\n      });\n      const j = await r.json();\n      add('bot', j.reply || '(no reply)');\n    }\n\n    sendBtn.onclick = send;\n    input.addEventListener('keydown', e => { if(e.key === 'Enter') send(); });\n  </script>\n</body>\n</html>`;\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/jana/cf_ai_edge_chat/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/jana/cf_ai_edge_chat/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/jana/cf_ai_edge_chat/.wrangler/tmp/bundle-Heix2c/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/jana/cf_ai_edge_chat/.wrangler/tmp/bundle-Heix2c/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/jana/cf_ai_edge_chat/.wrangler/tmp/bundle-Heix2c/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
